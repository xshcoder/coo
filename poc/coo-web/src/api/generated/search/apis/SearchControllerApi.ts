/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageCoo,
  PageUser,
} from '../models/index';
import {
    PageCooFromJSON,
    PageCooToJSON,
    PageUserFromJSON,
    PageUserToJSON,
} from '../models/index';

export interface SearchCoosRequest {
    text: string;
    page?: number;
    size?: number;
}

export interface SearchUsersRequest {
    text?: string;
    page?: number;
    size?: number;
}

/**
 * 
 */
export class SearchControllerApi extends runtime.BaseAPI {

    /**
     */
    async searchCoosRaw(requestParameters: SearchCoosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageCoo>> {
        if (requestParameters['text'] == null) {
            throw new runtime.RequiredError(
                'text',
                'Required parameter "text" was null or undefined when calling searchCoos().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['text'] != null) {
            queryParameters['text'] = requestParameters['text'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/search/coos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageCooFromJSON(jsonValue));
    }

    /**
     */
    async searchCoos(requestParameters: SearchCoosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageCoo> {
        const response = await this.searchCoosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchUsersRaw(requestParameters: SearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageUser>> {
        const queryParameters: any = {};

        if (requestParameters['text'] != null) {
            queryParameters['text'] = requestParameters['text'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/search/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageUserFromJSON(jsonValue));
    }

    /**
     */
    async searchUsers(requestParameters: SearchUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageUser> {
        const response = await this.searchUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
