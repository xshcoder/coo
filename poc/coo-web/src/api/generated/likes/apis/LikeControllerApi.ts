/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Like,
  PageLike,
} from '../models/index';
import {
    LikeFromJSON,
    LikeToJSON,
    PageLikeFromJSON,
    PageLikeToJSON,
} from '../models/index';

export interface GetLikesByCooIdRequest {
    cooId: string;
    page?: number;
    size?: number;
}

export interface GetLikesByReplyIdRequest {
    replyId: string;
    page?: number;
    size?: number;
}

export interface GetLikesByUserIdRequest {
    userId: string;
    page?: number;
    size?: number;
}

export interface GetLikesCountForCooRequest {
    cooId: string;
}

export interface GetLikesCountForReplyRequest {
    replyId: string;
}

export interface HasUserLikedCooRequest {
    cooId: string;
    userId: string;
}

export interface HasUserLikedReplyRequest {
    replyId: string;
    userId: string;
}

export interface LikeCooRequest {
    cooId: string;
    userId: string;
    likedToUserId: string;
}

export interface LikeReplyRequest {
    replyId: string;
    userId: string;
    likedToUserId: string;
}

export interface UnlikeCooRequest {
    cooId: string;
    userId: string;
}

export interface UnlikeReplyRequest {
    replyId: string;
    userId: string;
}

/**
 * 
 */
export class LikeControllerApi extends runtime.BaseAPI {

    /**
     */
    async getLikesByCooIdRaw(requestParameters: GetLikesByCooIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageLike>> {
        if (requestParameters['cooId'] == null) {
            throw new runtime.RequiredError(
                'cooId',
                'Required parameter "cooId" was null or undefined when calling getLikesByCooId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/likes/coo/{cooId}`.replace(`{${"cooId"}}`, encodeURIComponent(String(requestParameters['cooId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageLikeFromJSON(jsonValue));
    }

    /**
     */
    async getLikesByCooId(requestParameters: GetLikesByCooIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageLike> {
        const response = await this.getLikesByCooIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLikesByReplyIdRaw(requestParameters: GetLikesByReplyIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageLike>> {
        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling getLikesByReplyId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/likes/reply/{replyId}`.replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageLikeFromJSON(jsonValue));
    }

    /**
     */
    async getLikesByReplyId(requestParameters: GetLikesByReplyIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageLike> {
        const response = await this.getLikesByReplyIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLikesByUserIdRaw(requestParameters: GetLikesByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageLike>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getLikesByUserId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/likes/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageLikeFromJSON(jsonValue));
    }

    /**
     */
    async getLikesByUserId(requestParameters: GetLikesByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageLike> {
        const response = await this.getLikesByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLikesCountForCooRaw(requestParameters: GetLikesCountForCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['cooId'] == null) {
            throw new runtime.RequiredError(
                'cooId',
                'Required parameter "cooId" was null or undefined when calling getLikesCountForCoo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/likes/count/coo/{cooId}`.replace(`{${"cooId"}}`, encodeURIComponent(String(requestParameters['cooId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getLikesCountForCoo(requestParameters: GetLikesCountForCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.getLikesCountForCooRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLikesCountForReplyRaw(requestParameters: GetLikesCountForReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling getLikesCountForReply().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/likes/count/reply/{replyId}`.replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getLikesCountForReply(requestParameters: GetLikesCountForReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.getLikesCountForReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hasUserLikedCooRaw(requestParameters: HasUserLikedCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: boolean; }>> {
        if (requestParameters['cooId'] == null) {
            throw new runtime.RequiredError(
                'cooId',
                'Required parameter "cooId" was null or undefined when calling hasUserLikedCoo().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling hasUserLikedCoo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/likes/status/coo/{cooId}`.replace(`{${"cooId"}}`, encodeURIComponent(String(requestParameters['cooId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async hasUserLikedCoo(requestParameters: HasUserLikedCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: boolean; }> {
        const response = await this.hasUserLikedCooRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hasUserLikedReplyRaw(requestParameters: HasUserLikedReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: boolean; }>> {
        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling hasUserLikedReply().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling hasUserLikedReply().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/likes/status/reply/{replyId}`.replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async hasUserLikedReply(requestParameters: HasUserLikedReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: boolean; }> {
        const response = await this.hasUserLikedReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async likeCooRaw(requestParameters: LikeCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Like>> {
        if (requestParameters['cooId'] == null) {
            throw new runtime.RequiredError(
                'cooId',
                'Required parameter "cooId" was null or undefined when calling likeCoo().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling likeCoo().'
            );
        }

        if (requestParameters['likedToUserId'] == null) {
            throw new runtime.RequiredError(
                'likedToUserId',
                'Required parameter "likedToUserId" was null or undefined when calling likeCoo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['likedToUserId'] != null) {
            queryParameters['likedToUserId'] = requestParameters['likedToUserId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/likes/coo/{cooId}`.replace(`{${"cooId"}}`, encodeURIComponent(String(requestParameters['cooId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LikeFromJSON(jsonValue));
    }

    /**
     */
    async likeCoo(requestParameters: LikeCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Like> {
        const response = await this.likeCooRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async likeReplyRaw(requestParameters: LikeReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Like>> {
        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling likeReply().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling likeReply().'
            );
        }

        if (requestParameters['likedToUserId'] == null) {
            throw new runtime.RequiredError(
                'likedToUserId',
                'Required parameter "likedToUserId" was null or undefined when calling likeReply().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['likedToUserId'] != null) {
            queryParameters['likedToUserId'] = requestParameters['likedToUserId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/likes/reply/{replyId}`.replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LikeFromJSON(jsonValue));
    }

    /**
     */
    async likeReply(requestParameters: LikeReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Like> {
        const response = await this.likeReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unlikeCooRaw(requestParameters: UnlikeCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cooId'] == null) {
            throw new runtime.RequiredError(
                'cooId',
                'Required parameter "cooId" was null or undefined when calling unlikeCoo().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling unlikeCoo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/likes/coo/{cooId}/unlike`.replace(`{${"cooId"}}`, encodeURIComponent(String(requestParameters['cooId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async unlikeCoo(requestParameters: UnlikeCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unlikeCooRaw(requestParameters, initOverrides);
    }

    /**
     */
    async unlikeReplyRaw(requestParameters: UnlikeReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling unlikeReply().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling unlikeReply().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/likes/reply/{replyId}/unlike`.replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async unlikeReply(requestParameters: UnlikeReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unlikeReplyRaw(requestParameters, initOverrides);
    }

}
