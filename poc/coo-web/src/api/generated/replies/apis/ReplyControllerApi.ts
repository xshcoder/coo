/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageReply,
  Reply,
} from '../models/index';
import {
    PageReplyFromJSON,
    PageReplyToJSON,
    ReplyFromJSON,
    ReplyToJSON,
} from '../models/index';

export interface GetRepliesForCooRequest {
    cooId: string;
    page?: number;
    size?: number;
}

export interface GetRepliesForReplyRequest {
    replyId: string;
    page?: number;
    size?: number;
}

export interface GetReplyRequest {
    replyId: string;
}

export interface ReplyToCooRequest {
    cooId: string;
    userId: string;
    body: string;
}

export interface ReplyToReplyRequest {
    replyId: string;
    userId: string;
    body: string;
}

/**
 * 
 */
export class ReplyControllerApi extends runtime.BaseAPI {

    /**
     */
    async getRepliesForCooRaw(requestParameters: GetRepliesForCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageReply>> {
        if (requestParameters['cooId'] == null) {
            throw new runtime.RequiredError(
                'cooId',
                'Required parameter "cooId" was null or undefined when calling getRepliesForCoo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/replies/coo/{cooId}`.replace(`{${"cooId"}}`, encodeURIComponent(String(requestParameters['cooId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageReplyFromJSON(jsonValue));
    }

    /**
     */
    async getRepliesForCoo(requestParameters: GetRepliesForCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageReply> {
        const response = await this.getRepliesForCooRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRepliesForReplyRaw(requestParameters: GetRepliesForReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageReply>> {
        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling getRepliesForReply().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/replies/reply/{replyId}`.replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageReplyFromJSON(jsonValue));
    }

    /**
     */
    async getRepliesForReply(requestParameters: GetRepliesForReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageReply> {
        const response = await this.getRepliesForReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReplyRaw(requestParameters: GetReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reply>> {
        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling getReply().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/replies/{replyId}`.replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReplyFromJSON(jsonValue));
    }

    /**
     */
    async getReply(requestParameters: GetReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reply> {
        const response = await this.getReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async replyToCooRaw(requestParameters: ReplyToCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reply>> {
        if (requestParameters['cooId'] == null) {
            throw new runtime.RequiredError(
                'cooId',
                'Required parameter "cooId" was null or undefined when calling replyToCoo().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling replyToCoo().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replyToCoo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/replies/coo/{cooId}`.replace(`{${"cooId"}}`, encodeURIComponent(String(requestParameters['cooId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReplyFromJSON(jsonValue));
    }

    /**
     */
    async replyToCoo(requestParameters: ReplyToCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reply> {
        const response = await this.replyToCooRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async replyToReplyRaw(requestParameters: ReplyToReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reply>> {
        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling replyToReply().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling replyToReply().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replyToReply().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/replies/reply/{replyId}`.replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReplyFromJSON(jsonValue));
    }

    /**
     */
    async replyToReply(requestParameters: ReplyToReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reply> {
        const response = await this.replyToReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
