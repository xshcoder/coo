/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Coo,
  PageCoo,
} from '../models/index';
import {
    CooFromJSON,
    CooToJSON,
    PageCooFromJSON,
    PageCooToJSON,
} from '../models/index';

export interface CreateCooRequest {
    coo: Coo;
}

export interface DeleteCooRequest {
    id: string;
}

export interface GetCooByIdRequest {
    id: string;
}

export interface GetCoosByUserIdRequest {
    userId: string;
    page?: number;
    size?: number;
}

export interface UpdateCooRequest {
    id: string;
    coo: Coo;
}

/**
 * 
 */
export class CooControllerApi extends runtime.BaseAPI {

    /**
     */
    async createCooRaw(requestParameters: CreateCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Coo>> {
        if (requestParameters['coo'] == null) {
            throw new runtime.RequiredError(
                'coo',
                'Required parameter "coo" was null or undefined when calling createCoo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/coos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CooToJSON(requestParameters['coo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CooFromJSON(jsonValue));
    }

    /**
     */
    async createCoo(requestParameters: CreateCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Coo> {
        const response = await this.createCooRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteCooRaw(requestParameters: DeleteCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteCoo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/coos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteCoo(requestParameters: DeleteCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCooRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getCooByIdRaw(requestParameters: GetCooByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Coo>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getCooById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/coos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CooFromJSON(jsonValue));
    }

    /**
     */
    async getCooById(requestParameters: GetCooByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Coo> {
        const response = await this.getCooByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCoosByUserIdRaw(requestParameters: GetCoosByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageCoo>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getCoosByUserId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/coos/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageCooFromJSON(jsonValue));
    }

    /**
     */
    async getCoosByUserId(requestParameters: GetCoosByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageCoo> {
        const response = await this.getCoosByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateCooRaw(requestParameters: UpdateCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Coo>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateCoo().'
            );
        }

        if (requestParameters['coo'] == null) {
            throw new runtime.RequiredError(
                'coo',
                'Required parameter "coo" was null or undefined when calling updateCoo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/coos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CooToJSON(requestParameters['coo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CooFromJSON(jsonValue));
    }

    /**
     */
    async updateCoo(requestParameters: UpdateCooRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Coo> {
        const response = await this.updateCooRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
