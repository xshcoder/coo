/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Follow,
  PageFollow,
  Pageable,
} from '../models/index';
import {
    FollowFromJSON,
    FollowToJSON,
    PageFollowFromJSON,
    PageFollowToJSON,
    PageableFromJSON,
    PageableToJSON,
} from '../models/index';

export interface FollowUserRequest {
    followerId: string;
    followedId: string;
}

export interface GetFollowersRequest {
    userId: string;
    pageable: Pageable;
}

export interface GetFollowersCountRequest {
    userId: string;
}

export interface GetFollowingRequest {
    userId: string;
    pageable: Pageable;
}

export interface GetFollowingCountRequest {
    userId: string;
}

export interface IsFollowingRequest {
    followerId: string;
    followedId: string;
}

export interface UnfollowUserRequest {
    followerId: string;
    followedId: string;
}

/**
 * 
 */
export class FollowControllerApi extends runtime.BaseAPI {

    /**
     */
    async followUserRaw(requestParameters: FollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Follow>> {
        if (requestParameters['followerId'] == null) {
            throw new runtime.RequiredError(
                'followerId',
                'Required parameter "followerId" was null or undefined when calling followUser().'
            );
        }

        if (requestParameters['followedId'] == null) {
            throw new runtime.RequiredError(
                'followedId',
                'Required parameter "followedId" was null or undefined when calling followUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follows/{followerId}/follow/{followedId}`.replace(`{${"followerId"}}`, encodeURIComponent(String(requestParameters['followerId']))).replace(`{${"followedId"}}`, encodeURIComponent(String(requestParameters['followedId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FollowFromJSON(jsonValue));
    }

    /**
     */
    async followUser(requestParameters: FollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Follow> {
        const response = await this.followUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFollowersRaw(requestParameters: GetFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageFollow>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getFollowers().'
            );
        }

        if (requestParameters['pageable'] == null) {
            throw new runtime.RequiredError(
                'pageable',
                'Required parameter "pageable" was null or undefined when calling getFollowers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageable'] != null) {
            queryParameters['pageable'] = requestParameters['pageable'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follows/{userId}/followers`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFollowFromJSON(jsonValue));
    }

    /**
     */
    async getFollowers(requestParameters: GetFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageFollow> {
        const response = await this.getFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFollowersCountRaw(requestParameters: GetFollowersCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getFollowersCount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follows/{userId}/followers/count`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getFollowersCount(requestParameters: GetFollowersCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getFollowersCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFollowingRaw(requestParameters: GetFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageFollow>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getFollowing().'
            );
        }

        if (requestParameters['pageable'] == null) {
            throw new runtime.RequiredError(
                'pageable',
                'Required parameter "pageable" was null or undefined when calling getFollowing().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageable'] != null) {
            queryParameters['pageable'] = requestParameters['pageable'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follows/{userId}/following`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFollowFromJSON(jsonValue));
    }

    /**
     */
    async getFollowing(requestParameters: GetFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageFollow> {
        const response = await this.getFollowingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFollowingCountRaw(requestParameters: GetFollowingCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getFollowingCount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follows/{userId}/following/count`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getFollowingCount(requestParameters: GetFollowingCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getFollowingCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async isFollowingRaw(requestParameters: IsFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['followerId'] == null) {
            throw new runtime.RequiredError(
                'followerId',
                'Required parameter "followerId" was null or undefined when calling isFollowing().'
            );
        }

        if (requestParameters['followedId'] == null) {
            throw new runtime.RequiredError(
                'followedId',
                'Required parameter "followedId" was null or undefined when calling isFollowing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follows/{followerId}/is-following/{followedId}`.replace(`{${"followerId"}}`, encodeURIComponent(String(requestParameters['followerId']))).replace(`{${"followedId"}}`, encodeURIComponent(String(requestParameters['followedId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async isFollowing(requestParameters: IsFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.isFollowingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unfollowUserRaw(requestParameters: UnfollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['followerId'] == null) {
            throw new runtime.RequiredError(
                'followerId',
                'Required parameter "followerId" was null or undefined when calling unfollowUser().'
            );
        }

        if (requestParameters['followedId'] == null) {
            throw new runtime.RequiredError(
                'followedId',
                'Required parameter "followedId" was null or undefined when calling unfollowUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/follows/{followerId}/unfollow/{followedId}`.replace(`{${"followerId"}}`, encodeURIComponent(String(requestParameters['followerId']))).replace(`{${"followedId"}}`, encodeURIComponent(String(requestParameters['followedId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async unfollowUser(requestParameters: UnfollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unfollowUserRaw(requestParameters, initOverrides);
    }

}
