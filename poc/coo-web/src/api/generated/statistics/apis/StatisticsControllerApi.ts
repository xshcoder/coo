/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Statistics,
} from '../models/index';
import {
    StatisticsFromJSON,
    StatisticsToJSON,
} from '../models/index';

export interface CreateOrUpdateCooStatisticsRequest {
    cooId: string;
    statistics: Statistics;
}

export interface CreateOrUpdateReplyStatisticsRequest {
    replyId: string;
    statistics: Statistics;
}

export interface GetCooStatisticsRequest {
    cooId: string;
}

export interface GetCoosStatisticsRequest {
    requestBody: Array<string>;
}

export interface GetRepliesStatisticsRequest {
    requestBody: Array<string>;
}

export interface GetReplyStatisticsRequest {
    replyId: string;
}

/**
 * 
 */
export class StatisticsControllerApi extends runtime.BaseAPI {

    /**
     */
    async createOrUpdateCooStatisticsRaw(requestParameters: CreateOrUpdateCooStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Statistics>> {
        if (requestParameters['cooId'] == null) {
            throw new runtime.RequiredError(
                'cooId',
                'Required parameter "cooId" was null or undefined when calling createOrUpdateCooStatistics().'
            );
        }

        if (requestParameters['statistics'] == null) {
            throw new runtime.RequiredError(
                'statistics',
                'Required parameter "statistics" was null or undefined when calling createOrUpdateCooStatistics().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/statistics/coo/{cooId}`.replace(`{${"cooId"}}`, encodeURIComponent(String(requestParameters['cooId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StatisticsToJSON(requestParameters['statistics']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatisticsFromJSON(jsonValue));
    }

    /**
     */
    async createOrUpdateCooStatistics(requestParameters: CreateOrUpdateCooStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Statistics> {
        const response = await this.createOrUpdateCooStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createOrUpdateReplyStatisticsRaw(requestParameters: CreateOrUpdateReplyStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Statistics>> {
        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling createOrUpdateReplyStatistics().'
            );
        }

        if (requestParameters['statistics'] == null) {
            throw new runtime.RequiredError(
                'statistics',
                'Required parameter "statistics" was null or undefined when calling createOrUpdateReplyStatistics().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/statistics/reply/{replyId}`.replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StatisticsToJSON(requestParameters['statistics']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatisticsFromJSON(jsonValue));
    }

    /**
     */
    async createOrUpdateReplyStatistics(requestParameters: CreateOrUpdateReplyStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Statistics> {
        const response = await this.createOrUpdateReplyStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCooStatisticsRaw(requestParameters: GetCooStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Statistics>> {
        if (requestParameters['cooId'] == null) {
            throw new runtime.RequiredError(
                'cooId',
                'Required parameter "cooId" was null or undefined when calling getCooStatistics().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/statistics/coo/{cooId}`.replace(`{${"cooId"}}`, encodeURIComponent(String(requestParameters['cooId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatisticsFromJSON(jsonValue));
    }

    /**
     */
    async getCooStatistics(requestParameters: GetCooStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Statistics> {
        const response = await this.getCooStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCoosStatisticsRaw(requestParameters: GetCoosStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Statistics>>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling getCoosStatistics().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/statistics/coos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StatisticsFromJSON));
    }

    /**
     */
    async getCoosStatistics(requestParameters: GetCoosStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Statistics>> {
        const response = await this.getCoosStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRepliesStatisticsRaw(requestParameters: GetRepliesStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Statistics>>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling getRepliesStatistics().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/statistics/replies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StatisticsFromJSON));
    }

    /**
     */
    async getRepliesStatistics(requestParameters: GetRepliesStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Statistics>> {
        const response = await this.getRepliesStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReplyStatisticsRaw(requestParameters: GetReplyStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Statistics>> {
        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling getReplyStatistics().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/statistics/reply/{replyId}`.replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatisticsFromJSON(jsonValue));
    }

    /**
     */
    async getReplyStatistics(requestParameters: GetReplyStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Statistics> {
        const response = await this.getReplyStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
